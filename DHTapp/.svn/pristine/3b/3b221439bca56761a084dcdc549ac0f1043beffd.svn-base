package DHTapp;

import java.lang.annotation.Annotation;
import java.net.URI;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

//import com.fasterxml.jackson.databind.JsonNode;
//import com.sun.xml.internal.ws.api.message.Packet;
import org.onosproject.net.*;
import org.onosproject.net.device.*;
import org.onosproject.net.host.HostService;
import org.onosproject.net.provider.ProviderId;

import org.onlab.packet.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.onosproject.net.DeviceId.deviceId;
import static org.onosproject.net.PortNumber.portNumber;

public class DHTproviderdevices implements DeviceProvider {


    /** Atributes */
    /** @brieg Servicio de Log*/
    private final Logger log = LoggerFactory.getLogger(getClass());
    /** Valores typo de dispostivos validos */
    public short TYPE_NO_SDN = 2, TYPE_SDN = 1, TYPE_SENSOR = 3;

    public DHTproviderdevices(){}

    public void CreateDevice(DeviceProviderService dps, String hw, String sw, String id, String manufacturer,
                             Device.Type type, String mac, String serial) {

        URI uri = URI.create("sw:"+id);
        ChassisId cid = new ChassisId(mac);
        //SparseAnnotations annotations = annotations(node.get("annotations"));

        /** Creamos el dispositivo */
        DeviceDescription desc =
                new DefaultDeviceDescription(uri, type, manufacturer, hw, sw, serial, cid,
                        true, DefaultAnnotations.builder().set("Switch", "Legacy Switch")
                            .set(AnnotationKeys.PROTOCOL, "No Have")
                            .build());
        DeviceId deviceId = deviceId(uri);
        /** unimos el puerto al device */
        dps.deviceConnected(deviceId, desc);
    }

    /** Nos dice si un device existe ya o no */
    public boolean DeviceExist(DeviceService dsr, DeviceId deviceId){
        if (dsr.getDevice(deviceId) != null){
            return true;
        }
        return false;
    }

    /** Comprueba que todos los dispositivos existen y si alguno no existe lo crea */
    public boolean checkdevices(DeviceProviderService dpsv, DeviceService dsv, DHTpacket Packet_dht){
        short type_device[] = Packet_dht.getTypedevices();

        for (int pos = 0; pos < Packet_dht.getNumDevices(); pos++){
            if (type_device[pos] == TYPE_NO_SDN )
                /** Si NO existe el dispositivo lo creamos */
                if (!DeviceExist(dsv, deviceId(URI.create("sw:"+Long.toHexString(Packet_dht.getidmacdevices()[pos])))))
                {
                    try{
                        CreateDevice(dpsv, "NO SDN DEVICE", "1.0.0",
                                Long.toHexString(Packet_dht.getidmacdevices()[pos]),
                                "Switch Legacy",
                                Device.Type.SWITCH,
                                Long.toHexString(Packet_dht.getidmacdevices()[pos]),
                                Long.toHexString(Packet_dht.getidmacdevices()[pos]));
                    }catch (Exception e){
                        log.error("DHTapp ERROR al crear nuevos dispositivos : "+ e.getMessage());
                        return false;
                    }
                }
        }

        return true;
    }

    /** Comprueba que todos los puertos existen y si alguno no existe lo crea */
    public boolean checklinksperdevices(DeviceProviderService dpsv, DeviceService dsv, DHTpacket Packet_dht){
        short type_device[] = Packet_dht.getTypedevices();
        int num_port = 0;
        int ports_in[] = Packet_dht.getinports(), ports_out[] = Packet_dht.getoutports();
        /** Matriz de puertos a insertar, mÃ¡ximo 2 puertos por switch y paquete recibido */
        long num_ports[] = new long[2];

        for (int pos = 0; pos < Packet_dht.getNumDevices(); pos++){
            if (type_device[pos] == TYPE_NO_SDN ){
                /** Reiniciamos la acumulacion */
                num_port = 0;
                num_ports[0] = num_ports[1] = 0;
                /** Comprobamos los puerto de entrada de los dispositivos */
                if (!PortIsOnDevice (dsv, deviceId(URI.create("sw:"+Long.toHexString(Packet_dht.getidmacdevices()[pos]))),
                        ports_in[pos])){
                    num_ports[num_port] = (long)ports_in[pos];
                    num_port++;
                }
                if (ports_out[pos] != ports_in[pos]){
                    /** Comprobamos los puerto de salida de los dispositivos */
                    if (!PortIsOnDevice (dsv, deviceId(URI.create("sw:"+Long.toHexString(Packet_dht.getidmacdevices()[pos]))),
                            ports_out[pos])){
                        num_ports[num_port] = (long)ports_out[pos];
                        num_port++;
                    }
                }
                /** Si existe algun puerto para crear */
                if (num_port > 0){
                    try{
                        LinkPortToDevice(dpsv, deviceId(URI.create("sw:"+Long.toHexString(Packet_dht.getidmacdevices()[pos]))),
                        num_port, num_ports);
                    }catch (Exception e){
                        log.error("Algo fue mal con los puertos: "+e.getMessage());
                        /** Algo ha ido con ERROR*/
                        return false;
                    }
                }
            }
        }
        /** Todo ha ido correctamente */
        return true;
    }

    /** Enlaza una lista de puertos a un dispositivo */
    public void LinkPortToDevice(DeviceProviderService dps, DeviceId deviceId, int num_port, long num_ports[]){
        List<PortDescription> ports = new ArrayList<>();

        for (int pos = 0; pos < num_port; pos++){
            ports.add(CreatePortDescription(Port.Type.COPPER, num_ports[pos], 1000));
        }
        /** Actualizamos los puertos del dispositivo */
        dps.updatePorts(deviceId, ports);
    }

    /** Nos comprueba si un dispositivo tiene un puerto o no */
    public boolean PortIsOnDevice (DeviceService dsr, DeviceId deviceId, int num_port){

        Device device = dsr.getDevice(deviceId);
        if (device != null){
            if (dsr.getPort(deviceId, portNumber(num_port)) != null)
                return true;
            else
                return false;
        }
        return false;
    }

    /** @brieg Crea una puerto para un device*/
    public PortDescription CreatePortDescription(Port.Type Type, long Port, long speed) {
        return DefaultPortDescription.builder().withPortNumer(portNumber(Port)).isEnabled(true).
                portSpeed(speed).type(Type).build();

    }

    public String LongToMacString(long address)
    {
        int[] addressInBytes = new int[] {
                (int)((address >> 40) & 0xff),
                (int)((address >> 32) & 0xff),
                (int)((address >> 24) & 0xff),
                (int)((address >> 16) & 0xff),
                (int)((address >> 8 ) & 0xff),
                (int)((address >> 0) & 0xff)
        };

        return addressInBytes.toString();
    }

    @Override
    public void triggerProbe(DeviceId deviceId) {

    }

    @Override
    public void roleChanged(DeviceId deviceId, MastershipRole mastershipRole) {

    }

    @Override
    public boolean isReachable(DeviceId deviceId) {
        return false;
    }

    @Override
    public void changePortState(DeviceId deviceId, PortNumber portNumber, boolean b) {

    }

    @Override
    public ProviderId id() {
        return null;
    }
}
