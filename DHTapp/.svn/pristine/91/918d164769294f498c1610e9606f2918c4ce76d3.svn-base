/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package DHTapp;

import org.apache.felix.scr.annotations.*;
import org.onlab.packet.*;
import org.onosproject.core.ApplicationId;
import org.onosproject.core.CoreService;
import org.onosproject.net.*;
import org.onosproject.net.flow.DefaultTrafficSelector;
import org.onosproject.net.flow.DefaultTrafficTreatment;
import org.onosproject.net.flow.TrafficSelector;
import org.onosproject.net.flow.TrafficTreatment;
import org.onosproject.net.host.HostProviderService;
import org.onosproject.net.packet.*;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

/** Modificar la topologia en ONOS */
    import org.onosproject.net.config.NetworkConfigRegistry;
    import org.onosproject.net.PortNumber;

    import static org.onosproject.net.PortNumber.portNumber;
    import static org.onosproject.net.Link.Type;
    /** Librerias para enlaces */
    import org.onosproject.net.link.*;
    import org.onosproject.net.link.LinkService;
    import org.onosproject.net.provider.ProviderId;
    import org.onosproject.net.link.LinkProvider;
    import org.onosproject.net.link.LinkProviderRegistry;
    import org.onosproject.net.link.LinkProviderService;
    import org.onosproject.net.link.DefaultLinkDescription;
    import org.onosproject.net.LinkKey;

    /** Librerias para devices */
    import org.onosproject.net.device.DeviceService;
    import org.onosproject.net.device.DeviceProviderRegistry;

    /** Librerias para Host */
    import org.onosproject.net.host.HostProviderRegistry;

    import org.onosproject.net.config.NetworkConfigRegistryAdapter;
    import org.onosproject.net.device.DeviceDescription;
    import org.onosproject.net.device.DeviceProvider;
    import org.onosproject.net.device.DeviceProviderService;
    import org.onosproject.net.device.DeviceServiceAdapter;

    /** Librerias para recursos */
    import org.onosproject.net.NetworkResource;
    import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Skeletal ONOS application component.
 */
@Component(immediate = true)
public class AppComponent{
    /** MAC Propia del protocolo */
    private final String MAC_GENERIC = "AA:BB:CC:DD:EE:FF";
    private final short OPCODE_DHT_REQUEST = 1, OPCODE_DHT_REPLY = 2;

    /** @brieg Servicio de Log*/
    private final Logger log = LoggerFactory.getLogger(getClass());

    /** @brief Servicio para interactuar con el inventario de enlaces */
    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    private LinkService linkService;

    /** @brief Servicio para iterceptar paquetes recibidos y emitir paquetes de salida */
    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    private PacketService packetService;

    /** @brief Servicio para interactuar con el nucleo del sistema del controlador */
    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    private CoreService coreService;

    /** @brief Servicio para interactuar con el inventario de dispositivos */
    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    private DeviceService deviceService;

    /** @brief Direccion MAC broadcast */
    private final String ETHERNET_BROADCAST_ADDRESS = "FF:FF:FF:FF:FF:FF";

    /** @brief Procesador de paquetes recibidos */
    private ReactivePacketProcessor processor = new ReactivePacketProcessor();

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected NetworkConfigRegistry netCfgService;

    /** @brief Identificador de la aplicacion en Onos*/
    private ApplicationId appId;

    /** @brief Servicio de planificacion de tareas*/
    ScheduledExecutorService scheduledExecutorService = null;


    /** Topologia */
    /** register de los elementos de la red*/
    public static ProviderId PID;
    private LinkProvider linkProvider = new StubLinkProvider();
    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected LinkProviderRegistry linkProviderRegistry;

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected DeviceProviderRegistry deviceProviderRegistry;

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected HostProviderRegistry hostProviderRegistry;

    /** @brief Lista de enlaces de la topologia*/
    protected Set<LinkKey> configuredLinks = new HashSet<>();

    /** Provider de servercios para elementos de red */
    private LinkProviderService linkProviderService;
    private DeviceProviderService deviceProviderService;
    private HostProviderService hostProviderService;

    /**Classe para manejar los enlaces */
    private DHTproviderlink DHTlink = new DHTproviderlink();

    /** @brief Funcion de activacion de la aplicacion. Punto de entrada al programa  */
    @Activate
    protected void activate() {
        log.info("Started");

        appId = coreService.registerApplication("DHT.NetServ.UAH");

        PID = new ProviderId("cfg", "DHT.NetServ.UAH", true);

        packetService.addProcessor(processor, PacketProcessor.director(2));

        scheduledExecutorService = Executors.newScheduledThreadPool(1);

        /**Registramos el servicio */
        linkProviderService = linkProviderRegistry.register(linkProvider);

        /** Comprobacion de los registros, no deben ser nulos */
        ConfigProvider(deviceProviderRegistry, linkProviderRegistry, hostProviderRegistry);

        ScheduledFuture scheduledFuture =
                scheduledExecutorService.schedule(() -> {
                    if (deviceService.getDeviceCount() > 0) {
                        log.info("Application started");
                        /** Cargamos la lista de enlaces*/
                        DHTlink.createLinks(netCfgService,configuredLinks);
                        log.info("Lista de enlaces cargados");

                        /** Activo la selecci贸n de paquetes para mi protocolo **/
                        requestIntercepts();
                        log.info("Activado el capturador de paquetes del protocolo");

                        /** Comenzamos el proceso de exploraci贸n*/
                        log.info("Iniciamos el protocolo");
                        startDHTProcess();

                        log.info(configuredLinks.toString());
                    } else {
                        log.error("The topology is not loaded");
                    }
                },  0,  TimeUnit.SECONDS);
    }

    @Deactivate
    protected void deactivate() {

        linkProviderRegistry.unregister(linkProvider);

        withdrawIntercepts();
        scheduledExecutorService.shutdownNow();

        log.info("Stopped");
    }

    /** Clases y Funciones auxiliares para realizar el proceso de descubrimiento */

    /** @brief Funci贸n que inicia el proceso de exploraci贸n del protocolo */
    private void startDHTProcess() {
        /** Se Genera un array de dispositivos descubierto por SDN*/
        Iterable<Device> devices = deviceService.getAvailableDevices(Device.Type.SWITCH);
        while (true){
            /** Se Recorreo ese array*/
            for(Device device : devices) {
                log.info("Device select: "+  device.id());
                /** Creamos el paquete inicial para enviar al device seleccionado*/
                log.info("Creamos paquete DHT Request");
                Ethernet packet =  CreatePacketDHT(device.id(), OPCODE_DHT_REQUEST, 0);
                log.info("Paquete creado correctamente");
                /** Enviamos el paquete creado */
                sendpacketwithDevice(device,packet);
                log.info("OK->Paquete enviado correctamente!!!");
                /** Para depurar esperamos un poco entre lanzamientos */
                try {
                    Thread.sleep(3000l);
                    log.info("Discovery with device id " + device.id() + " DONE");
                } catch (InterruptedException e) {
                    log.error("Interrupted exception");
                }
            }
        }
    }

    /** @brief Clase interna utilizada procesar las notificaciones de paquetes de descubrimiento y confirmacion recibidos **/
    private class ReactivePacketProcessor implements PacketProcessor {

        @Override
        public void process(PacketContext context) {
            /** Obtenemos el paquete In **/
            InboundPacket pkt = context.inPacket();
            Ethernet ethPkt = pkt.parsed();

            /** Comprobamos si es de nuestro protocolo */
            if (ethPkt == null) {
                log.info("Null ethernet packet");
                return;
            }

            if(ethPkt.getEtherType() == DHTpacket.DHT_ETHERNET_TYPE) {
                byte[] raw = context.inPacket().parsed().getPayload().serialize();
                try {
                    DHTpacket Packet_in_dht = DHTpacket.deserializer().deserialize(raw, 0, raw.length);
                    /** Intentamos sacar los datos por pantalla del paquete */
                    printPacketContextInfo(context, Packet_in_dht);
                    /** Si llega un request */
                    if (Packet_in_dht.getOpcode() == OPCODE_DHT_REQUEST){
                        /** Si el numero de saltos es 1 Toca modificar la topologia */
                        if (Packet_in_dht.getNumDevices() == 1){
                            log.info("Request Recibido: Dectectado enlace entre dos SDN DEVICES!");
                            /** SOLUCION PARA EL PUERTO DE SALIDA!!!*/

                                DHTlink.linkbewteenSDNdevices(configuredLinks,
                                    (int)context.inPacket().receivedFrom().port().toLong(),
                                    1,
                                    context.inPacket().receivedFrom().deviceId().toString(),
                                    "of:"+parser_idpacket_to_iddevice(Packet_in_dht.getidmacdevices()[0]),
                                    deviceService, linkProviderService
                                );


                        }
                        /** Si el numero es mayor que 1 tenemos crear un paquete reply en sentido contrario!!!*/
                        else{
                            log.info("Request Recibido: WARNING!!, Detectado Request con mas de 1 salto");
                            log.info("Creamos paquete Reply para comprobar la rama");
                            Ethernet Reply_packet = CreatePacketDHT(context.inPacket().receivedFrom().deviceId(),
                                    OPCODE_DHT_REPLY,
                                    (int)context.inPacket().receivedFrom().port().toLong());
                            log.info("Enviamos paquete reply");
                            /** Enviamos el paquete creado utilizando la id del switch*/
                            sendPacketwithID(context.inPacket().receivedFrom().deviceId(),
                                    context.inPacket().receivedFrom().port(),
                                    Reply_packet);
                            log.info("Paquete enviado correctamnente");
                        }
                    }
                    /** Si llega un reply */
                    else{
                        /** Toca modificar la topologia con los datos obtenidos */
                        log.info("Request reply: Pasamos a modificar la topologia con los datos");
                    }
                } catch(DeserializationException e) {
                    log.error("Exception cached while deserializing discovery packet");
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * @brief Parsea la id recibida en el paquete a una valida para el sistema *
     * @param dpid Id del dispositivo (long)
     */
    public String parser_idpacket_to_iddevice(long dpid) {
        String DpidString = String.valueOf(dpid);
        int len = DpidString.length();

        for(int aux = len; aux<16; aux++){
            DpidString="0"+ DpidString;
        }
        return DpidString;
    }

    /**
     * @brief Funcion encarga de crear el paquete de exploraci贸n REQUEST
     *
     * @param deviceId Id del dispositivo
     * @param Opcode c贸digo de opcion para los paquetes del protocolo
     * @param port puerto (representa el puerto de salida)
     */
    private Ethernet CreatePacketDHT(DeviceId deviceId, short Opcode, int port) {
        Ethernet packet = new Ethernet();
        short Num_devices = 1;
        int Type_devices[] = new int[DHTpacket.DHT_MAX_ELEMENT], outports[] = new int[DHTpacket.DHT_MAX_ELEMENT],
                inports[] = new int[DHTpacket.DHT_MAX_ELEMENT];
        long id_mac_devices[] = new long[DHTpacket.DHT_MAX_ELEMENT];

        /**Completamos los arrays con los datos del switch elegido */
        Type_devices[0] = 1; /*Nodo SDN*/
        id_mac_devices[0] = Long.parseLong(deviceId.toString().replace("of:","")); /* Id del dispositivo */
        outports[0] = port;
        inports[0] = port;

        log.info("Packet Request Process Create: Type: "+  Type_devices[0] +
                "Id Device: "+id_mac_devices[0]);

        DHTpacket RequestPacket = new DHTpacket(Opcode, Num_devices, Type_devices,
                outports, inports, id_mac_devices);

        /** Creamos paquete y completamos los datos como pay load*/
        RequestPacket.setParent(packet);

        packet.setSourceMACAddress(MAC_GENERIC)
                .setDestinationMACAddress(ETHERNET_BROADCAST_ADDRESS)
                .setEtherType(RequestPacket.DHT_ETHERNET_TYPE)
                .setPad(true)
                .setPayload(RequestPacket);

        log.info("Packet Request Create OK!!!");

        return packet;
    }

    /**
     * @brief Imprime informacion del contexto del packet-in recibido.
     *
     * @param context Contexto del packet-in recibido por el controlador
     * @param Packet_in_dht paquete propio del protocolo
     */
    private void printPacketContextInfo(PacketContext context, DHTpacket Packet_in_dht) {
        Ethernet inEthPacket = context.inPacket().parsed();
        if(inEthPacket.getEtherType() != DHTpacket.DHT_ETHERNET_TYPE)
        {
            log.info("Unknown");
            return;
        }

        log.info("DHT packet received. Device: " + context.inPacket().receivedFrom().deviceId()
                + " rcv port: " + context.inPacket().receivedFrom().port()
                + " src MAC: " + inEthPacket.getSourceMAC()
                + " dst MAC: " + inEthPacket.getDestinationMAC()
                + " Packet: " + Packet_in_dht.toString());
    }

    /**
     * @brief Envia paquete de descubrimiento
     *
     * @param device Nodo que envia el paquete
     * @param packet trama Ethernet que encapsula el paquete de descubrimiento
     */
    private void sendpacketwithDevice(Device device, Ethernet packet) {

        TrafficTreatment treatment = DefaultTrafficTreatment.builder()
                .setOutput(PortNumber.FLOOD)
                .build();

        byte[] buffer = packet.serialize();
        OutboundPacket outboundPacket = new DefaultOutboundPacket(device.id(),
                treatment, ByteBuffer.wrap(buffer));

        packetService.emit(outboundPacket);
    }

    /**
     * @brief Enviar Paquete usando el puerto de salida y la id del dispisitivo
     *
     * @param sourceDeviceId Nodo que envia el paquete
     * @param outPort Puerto por donde se reenvia el paquete
     * @param packet trama Ethernet que encapsula el paquete de confirmacion
     */
    private void sendPacketwithID(DeviceId sourceDeviceId, PortNumber outPort, Ethernet packet) {

        TrafficTreatment treatment = DefaultTrafficTreatment.builder()
                .setOutput(outPort)
                .build();

        byte[] buffer = packet.serialize();
        OutboundPacket outboundPacket = new DefaultOutboundPacket(sourceDeviceId,
                treatment, ByteBuffer.wrap(buffer));

        packetService.emit(outboundPacket);
    }


    /**
     * @brief Activa la notificacion de paquetes de descubrimiento y confirmacion recibidos
     */
    private void requestIntercepts() {
        TrafficSelector.Builder selector = DefaultTrafficSelector.builder();

        selector.matchEthType(DHTpacket.DHT_ETHERNET_TYPE);
        packetService.requestPackets(selector.build(), PacketPriority.REACTIVE, appId);
    }

    /**
     * @brief Desactiva la notificacion de paquetes de descubrimiento y confirmacion recibidos
     */
    private void withdrawIntercepts() {
        packetService.removeProcessor(processor);
    }

    /**
     * Creates a new configuration provider.
     *
     * @param deviceProviderRegistry device provider registry
     * @param linkProviderRegistry   link provider registry
     * @param hostProviderRegistry   host provider registry
     */
    private void ConfigProvider(
                   DeviceProviderRegistry deviceProviderRegistry,
                   LinkProviderRegistry linkProviderRegistry,
                   HostProviderRegistry hostProviderRegistry) {
        this.deviceProviderRegistry = checkNotNull(deviceProviderRegistry, "Device provider registry cannot be null");
        this.linkProviderRegistry = checkNotNull(linkProviderRegistry, "Link provider registry cannot be null");
        this.hostProviderRegistry = checkNotNull(hostProviderRegistry, "Host provider registry cannot be null");
    }


    // Stub provider used to get LinkProviderService
    private static final class StubLinkProvider implements LinkProvider {
        @Override
        public ProviderId id() {
            return PID;
        }
    }
}
